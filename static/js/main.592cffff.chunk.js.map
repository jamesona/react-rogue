{"version":3,"sources":["InputManager.js","Entity.js","Player.js","World.js","Loot.js","Monster.js","Stairs.js","Spawner.js","Rogue.js","index.js"],"names":["Action","type","data","this","toString","InputManager","observers","handleKeys","e","move","createAction","reset","preventDefault","keyCode","broadcast","x","y","fn","push","filter","subscriber","forEach","document","addEventListener","removeEventListener","Entity","size","attributes","dx","dy","locationFromVector","Object","assign","context","fillStyle","color","textBaseline","font","emoji","symbol","offset","fillText","ascii","amount","health","verb","world","console","log","uppercaseFirstChar","str","toUpperCase","slice","Player","name","maxHealth","attack","defense","score","item","logMessage","delta","effect","entries","i","a","camelStr","attribute","change","maxAttr","Math","min","replace","length","addToHistory","items","join","canvas","width","printLeft","hpBar","attackLevel","defenseLevel","printRight","percent","segments","Array","fill","map","v","floor","damageReduction","max","buildGrid","height","World","tileSize","historyLines","player","entities","history","entity","sx","sy","getTile","iterateTiles","round","random","cellGenerator","Map","Cellular","connected","randomize","userCallback","value","isBorderTile","isGeneratedWall","create","connect","createCellularMap","moveToValidSpace","find","spaceIsValid","tileExists","isWall","getEntityAtLocation","spacesTried","applyPositionDelta","getSpiralCoord","action","definition","undefined","fillRect","textAlign","line","lineNumber","ended","drawMap","processEntities","printLog","drawWall","draw","message","indexFromCenter","radius","sqrt","sideLength","Loot","use","remove","types","Monster","damageDealtByPlayer","takeDamage","points","damageDealtToPlayer","end","Stairs","spawner","Spawner","spawnLoot","spawnMonster","spawnStairs","randomInt","count","createEntity","add","spawn","randomCoords","Rogue","tilesize","canvasRef","useRef","inputManager","useState","setWorldState","handleInput","init","newWorldState","movePlayer","useEffect","bindKeys","subscribe","unbindKeys","unsubscribe","ctx","current","getContext","clearRect","ref","style","margin","background","ReactDOM","render","body"],"mappings":"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","file":"static/js/main.592cffff.chunk.js","sourcesContent":["export class Action {\n\tstatic createAction(type) {\n\t\treturn data => new Action(type, data)\n\t}\n\n\tconstructor(type, data = {}) {\n\t\tthis.type = type.toString() || 'Null Action'\n\t\tthis.data = { ...data }\n\t}\n}\n\nexport class InputManager {\n\tobservers = []\n\n\tsubscribe(fn) {\n\t\tthis.observers.push(fn)\n\t}\n\n\tunsubscribe(fn) {\n\t\tthis.observers = this.observers.filter(subscriber => subscriber !== fn)\n\t}\n\n\tbroadcast({ type, data }) {\n\t\tthis.observers.forEach(subscriber => subscriber(type, data))\n\t}\n\n\thandleKeys = e => {\n\t\tconst move = Action.createAction('move')\n\t\tconst reset = Action.createAction('reset')\n\n\t\tconst left = 37\n\t\tconst up = 38\n\t\tconst right = 39\n\t\tconst down = 40\n\t\tconst enter = 13\n\n\t\te.preventDefault()\n\t\tswitch (e.keyCode) {\n\t\t\tcase left: {\n\t\t\t\treturn this.broadcast(move({ x: -1, y: 0 }))\n\t\t\t}\n\n\t\t\tcase up: {\n\t\t\t\treturn this.broadcast(move({ x: 0, y: -1 }))\n\t\t\t}\n\n\t\t\tcase right: {\n\t\t\t\treturn this.broadcast(move({ x: 1, y: 0 }))\n\t\t\t}\n\n\t\t\tcase down: {\n\t\t\t\treturn this.broadcast(move({ x: 0, y: 1 }))\n\t\t\t}\n\n\t\t\tcase enter: {\n\t\t\t\treturn this.broadcast(reset())\n\t\t\t}\n\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\t}\n\n\tbindKeys() {\n\t\tdocument.addEventListener('keydown', this.handleKeys)\n\t}\n\n\tunbindKeys() {\n\t\tdocument.removeEventListener('keydown', this.handleKeys)\n\t}\n}\n","export class Entity {\n\tconstructor(x, y, size, attributes) {\n\t\tthis.x = x\n\t\tthis.y = y\n\t\tthis.size = size\n\t\tthis.attributes = { ...attributes }\n\t}\n\n\tmove(dx, dy) {\n\t\tconst [x, y] = this.locationFromVector(dx, dy)\n\t\tObject.assign(this, {\n\t\t\tx,\n\t\t\ty\n\t\t})\n\n\t\treturn [this.x, this.y]\n\t}\n\n\tlocationFromVector(dx, dy) {\n\t\treturn [this.x + dx, this.y + dy]\n\t}\n\n\tdraw(context) {\n\t\tcontext.fillStyle = this.attributes.color || '#fff'\n\t\tcontext.textBaseline = 'hanging'\n\t\tcontext.font = `${this.size}px monospace`\n\n\t\tif (this.attributes.emoji) {\n\t\t\tconst { symbol, offset: {x, y} } = this.attributes.emoji || {symbol: '', offset: { x: 0, y: 0 }}\n\t\t\tcontext.fillText(\n\t\t\t\tsymbol,\n\t\t\t\tthis.x * this.size + x,\n\t\t\t\tthis.y * this.size + y\n\t\t\t)\n\t\t} else {\n\t\t\tconst { symbol, offset: {x, y} } = this.attributes.ascii || {symbol: '', offset: { x: 0, y: 0 }}\n\t\t\tcontext.fillText(\n\t\t\t\tsymbol,\n\t\t\t\tthis.x * this.size + x,\n\t\t\t\tthis.y * this.size + y\n\t\t\t)\n\t\t}\n\t\t\n\t}\n\n\ttakeDamage(amount) {\n\t\tif (this.attributes && this.attributes.health)\n\t\t\tthis.attributes.health -= amount\n\t}\n\n\taction(verb, world) {\n\t\tconsole.log(verb)\n\t}\n}\n","import { Entity } from './Entity'\n\nconst uppercaseFirstChar = (str) => str[0].toUpperCase() + str.slice(1)\nconst toTitleCase = (camelStr) => {\n\treturn  uppercaseFirstChar(camelStr.replace(/([A-Z])/g, ' $1'))\n}\n\nexport class Player extends Entity {\n\tattributes = {\n\t\tname: 'Player',\n\t\tcolor: '#f00',\n\t\tascii: {\n\t\t\tsymbol: '@',\n\t\t\toffset: {\n\t\t\t\tx: 3,\n\t\t\t\ty: 1\n\t\t\t}\n\t\t},\n\t\temoji: {\n\t\t\tsymbol: '🧙',\n\t\t\toffset: {\n\t\t\t\tx: -4,\n\t\t\t\ty: 3\n\t\t\t}\n\t\t},\n\t\tmaxHealth: 100,\n\t\thealth: 100,\n\t\tattack: 5,\n\t\tdefense: 1,\n\t\tscore: 0\n\t}\n\n\tuse(item, world) {\n\t\tlet logMessage = `Picked up ${item.attributes.name}`\n\t\tconst delta = item.attributes.effect(this)\n\t\tObject.entries(delta).forEach(([attribute, change], i, a) => {\n\t\t\tif (this.attributes[attribute]) {\n\t\t\t\tthis.attributes[attribute] += change\n\t\t\t\t\n\t\t\t\tconst maxAttr = 'max' + uppercaseFirstChar(attribute)\n\t\t\t\tif (this.attributes[maxAttr]) {\n\t\t\t\t\tthis.attributes[attribute] = Math.min(this.attributes[attribute], this.attributes[maxAttr])\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.attributes[attribute] = change\n\t\t\t}\n\n\t\t\tif (i === 0) logMessage += ' ('\n\t\t\telse logMessage += ', '\n\t\t\tlogMessage += `${toTitleCase(attribute)} ${change > 0 ? '+' : ''}${change}`\n\t\t\t\n\t\t\tif (i === a.length - 1) logMessage += ')'\n\t\t})\n\t\tworld.addToHistory(logMessage)\n\t}\n\n\tget hpBar() {\n\t\tconst length = 10\n\t\tconst percent = this.attributes.health / this.attributes.maxHealth\n\t\tconst segments = Array(length)\n\t\t\t.fill(null)\n\t\t\t.map((v, i) => {\n\t\t\t\tconst thisBarPercent = (i + 1) / length\n\t\t\t\tconst isFilled = percent >= thisBarPercent\n\t\t\t\treturn isFilled ? '■' : ' '\n\t\t\t})\n\t\t\t.join('')\n\n\t\treturn `HP: [${segments}] ${this.attributes.health}/${this.attributes.maxHealth}`\n\t}\n\n\tget score() {\n\t\treturn `Score: ${this.attributes.score}`\n\t}\n\n\tget attackLevel() {\n\t\treturn `ATT: ${this.attributes.attack}`\n\t}\n\n\tget defenseLevel() {\n\t\treturn `DEF: ${this.attributes.defense} (${Math.floor((1 - this.damageReduction) * 100)}%)`\n\t}\n\n\tget damageReduction() {\n\t\treturn 1 - (Math.log(Math.max(this.attributes.defense), 1) / 10)\n\t}\n\n\tprintLeft(context, ...items) {\n\t\tcontext.fillStyle = this.attributes.color = '#fff'\n\t\tcontext.fillText(items.join(' '), this.size, 0)\n\t}\n\n\tprintRight(context, ...items) {\n\t\tcontext.fillStyle = this.attributes.color = '#fff'\n\t\tcontext.fillText(\n\t\t\titems.join(' '),\n\t\t\tcontext.canvas.width - items.join(' ').length * this.size,\n\t\t\t0\n\t\t)\n\t}\n\n\tdraw(context) {\n\t\tsuper.draw(context)\n\n\t\tthis.printLeft(context, this.hpBar, this.attackLevel, this.defenseLevel)\n\t\tthis.printRight(context, this.score)\n\t}\n}\n","import { Map } from 'rot-js'\nimport { Player } from './Player'\n\nexport const buildGrid = (width, height) =>\n\tnew Array(width).fill(null).map(() => new Array(height).fill(null))\n\nexport class World {\n\tconstructor(width, height, tileSize, historyLines) {\n\t\tthis.width = width\n\t\tthis.height = height\n\t\tthis.tileSize = tileSize\n\t\tthis.player = new Player(0, 0, tileSize)\n\t\tthis.entities = [this.player]\n\t\tthis.history = ['You have entered a dungeon']\n\t\tthis.historyLines = historyLines\n\t\tthis.map = buildGrid(width, height)\n\t\tthis.floor = 1\n\t}\n\n\tadd(entity) {\n\t\tthis.entities.push(entity)\n\t}\n\n\tremove(entity) {\n\t\tthis.entities = this.entities.filter(e => e !== entity)\n\t}\n\n\titerateTiles(fn, sx = 0, sy = 0) {\n\t\tfor (let x = sx; x < this.width; x++) {\n\t\t\tfor (let y = sy; y < this.height; y++) {\n\t\t\t\tif (fn(x, y, this.getTile(x, y))) return\n\t\t\t}\n\t\t}\n\t}\n\n\tcreateRandomMap() {\n\t\tthis.map = buildGrid(this.width, this.height)\n\t\tthis.iterateTiles(\n\t\t\t(x, y) => (this.map[x][y] = Math.round(Math.random()))\n\t\t)\n\t}\n\n\tcreateCellularMap() {\n\t\tthis.map = buildGrid(this.width, this.height)\n\t\tconst cellGenerator = new Map.Cellular(this.width, this.height, {\n\t\t\tconnected: true\n\t\t})\n\t\tcellGenerator.randomize(0.475)\n\n\t\tconst userCallback = (x, y, value) => {\n\t\t\tconst isBorderTile =\n\t\t\t\tx === 0 ||\n\t\t\t\ty === 0 ||\n\t\t\t\tx >= this.width - 1 ||\n\t\t\t\ty >= this.height - 1\n\t\t\tconst isGeneratedWall = value === 0\n\n\t\t\tthis.map[x][y] = isGeneratedWall || isBorderTile ? 1 : 0\n\t\t}\n\n\t\tcellGenerator.create(userCallback)\n\t\tcellGenerator.connect(userCallback, 1)\n\t}\n\n\tinit() {\n\t\tthis.createCellularMap()\n\t\tthis.moveToValidSpace(this.player)\n\t}\n\n\tgetEntityAtLocation(x, y) {\n\t\treturn this.entities.find(\n\t\t\tentity => entity.x === x && entity.y === y && entity !== this.player\n\t\t)\n\t}\n\n\tapplyPositionDelta(entity, dx, dy) {\n\t\treturn [entity.x + dx, entity.y + dy]\n\t}\n\n\tmoveToValidSpace(entity) {\n\t\tconst spaceIsValid = (x, y) =>\n\t\t\tthis.tileExists(x, y) &&\n\t\t\t!this.isWall(x, y) &&\n\t\t\t!this.getEntityAtLocation(x, y)\n\n\t\tlet spacesTried = 0\n\t\tlet dx = 0,\n\t\t\tdy = 0,\n\t\t\tx = 0,\n\t\t\ty = 0\n\n\t\twhile (\n\t\t\t!spaceIsValid(\n\t\t\t\t...([x, y] = this.applyPositionDelta(\n\t\t\t\t\tentity,\n\t\t\t\t\t...([dx, dy] = getSpiralCoord(spacesTried++))\n\t\t\t\t))\n\t\t\t)\n\t\t) {\n\t\t\tif (spacesTried > this.height * this.width) {\n\t\t\t\tconsole.log('Failed to place, something is wrong')\n\t\t\t\tdebugger\n\t\t\t\treturn [entity.x, entity.y]\n\t\t\t}\n\t\t}\n\n\t\tconsole.log(`placing ${entity.attributes.name} at [${x}, ${y}]`)\n\n\t\treturn entity.move(dx, dy)\n\t}\n\n\tmovePlayer(dx, dy) {\n\t\tconst { player } = this\n\t\tconst [x, y] = player.locationFromVector(dx, dy)\n\t\tconst targetTile = this.getTile(x, y)\n\n\t\tif (targetTile === 1) return\n\n\t\tconst entity = this.getEntityAtLocation(x, y)\n\n\t\tif (entity) {\n\t\t\tentity.action('bump', this)\n\t\t}\n\n\t\tif (!entity?.definition?.health) {\n\t\t\tplayer.move(dx, dy)\n\t\t}\n\t}\n\n\tgetTile(x, y) {\n\t\treturn this.map[x] && this.map[x][y]\n\t}\n\n\ttileExists(x, y) {\n\t\treturn this.getTile(x, y) !== undefined\n\t}\n\n\tisWall(x, y) {\n\t\treturn this.getTile(x, y) === 1\n\t}\n\n\tprintLog(context) {\n\t\tcontext.fillStyle = '#000'\n\t\tcontext.fillRect(0, this.height * this.tileSize, this.width * this.tileSize, this.historyLines * this.tileSize)\n\t\tcontext.fillStyle = '#fff'\n\t\tcontext.textAlign = 'start'\n\t\tthis.history.slice(-this.historyLines).forEach((line, lineNumber) => {\n\t\t\tcontext.fillText(line, this.tileSize, (this.height + lineNumber) * this.tileSize)\n\t\t})\n\t}\n\n\tdraw(context) {\n\t\tif (this.ended) return\n\n\t\tthis.drawMap(context)\n\t\tthis.processEntities(context)\n\t\tthis.printLog(context)\n\t}\n\n\tdrawMap(context) {\n\t\tthis.iterateTiles((x, y) => {\n\t\t\tif (this.map[x][y] === 1) {\n\t\t\t\tthis.drawWall(context, x, y)\n\t\t\t}\n\t\t})\n\t}\n\n\tprocessEntities(context) {\n\t\tthis.entities.forEach((entity, i) => {\n\t\t\ttry {\n\t\t\t\tentity.draw(context, this)\n\t\t\t} catch (e) {\n\t\t\t\tdebugger\n\t\t\t}\n\t\t})\n\t}\n\n\tdrawWall(context, x, y) {\n\t\tcontext.fillStyle = '#000'\n\t\tcontext.fillRect(\n\t\t\tx * this.tileSize,\n\t\t\ty * this.tileSize,\n\t\t\tthis.tileSize,\n\t\t\tthis.tileSize\n\t\t)\n\t}\n\n\taddToHistory(message) {\n\t\tthis.history.push(message)\n\t}\n\n\tend() {\n\t\tthis.ended = true\n\t}\n}\n\nfunction getSpiralCoord(indexFromCenter) {\n\tif (indexFromCenter === 0) return [0, 0]\n\n\tlet radius = Math.floor((Math.sqrt(indexFromCenter + 1) - 1) / 2) + 1\n\n\tlet p = (8 * radius * (radius - 1)) / 2\n\n\tlet sideLength = radius * 2\n\n\tlet a = (1 + indexFromCenter - p) % (radius * 8)\n\n\tlet dx = 0\n\tlet dy = 0\n\n\tswitch (Math.floor(a / (radius * 2))) {\n\t\tcase 2: {\n\t\t\tdx = a - radius\n\t\t\tdy = -radius\n\t\t\tbreak\n\t\t}\n\t\tcase 3: {\n\t\t\tdx = radius\n\t\t\tdy = (a % sideLength) - radius\n\t\t\tbreak\n\t\t}\n\t\tcase 0: {\n\t\t\tdx = radius - (a % sideLength)\n\t\t\tdy = radius\n\t\t\tbreak\n\t\t}\n\t\tcase 1: {\n\t\t\tdx = -radius\n\t\t\tdy = radius - (a % sideLength)\n\t\t\tbreak\n\t\t}\n\n\t\tdefault:\n\t\t\tbreak\n\t}\n\treturn [dx, dy]\n}\n","import { Entity } from './Entity'\n\nexport class Loot extends Entity {\n\tstatic types = [\n\t\t{\n\t\t\tname: 'Treasure',\n\t\t\tcolor: 'yellow',\n\t\t\tascii: {\n\t\t\t\tsymbol: '$',\n\t\t\t\toffset: {\n\t\t\t\t\tx: 3,\n\t\t\t\t\ty: 3\n\t\t\t\t}\n\t\t\t},\n\t\t\temoji: {\n\t\t\t\tsymbol: '💰',\n\t\t\t\toffset: {\n\t\t\t\t\tx: -2,\n\t\t\t\t\ty: 3\n\t\t\t\t}\n\t\t\t},\n\t\t\teffect: (player) => ({\n\t\t\t\tscore: 100\n\t\t\t})\n\t\t},\n\t\t{\n\t\t\tname: 'Health Potion',\n\t\t\tcolor: 'red',\n\t\t\tascii: {\n\t\t\t\tsymbol: '!',\n\t\t\t\toffset: {\n\t\t\t\t\tx: 6,\n\t\t\t\t\ty: 3\n\t\t\t\t}\n\t\t\t},\n\t\t\temoji: {\n\t\t\t\tsymbol: '🍖',\n\t\t\t\toffset: {\n\t\t\t\t\tx: -4,\n\t\t\t\t\ty: 3\n\t\t\t\t}\n\t\t\t},\n\t\t\teffect: (player) => ({\n\t\t\t\tmaxHealth: 1,\n\t\t\t\thealth: player.attributes.maxHealth * 0.25\n\t\t\t})\n\t\t},\n\t\t{\n\t\t\tname: 'Long Sword',\n\t\t\tcolor: 'darkgrey',\n\t\t\tascii: {\n\t\t\t\tsymbol: '/',\n\t\t\t\toffset: {\n\t\t\t\t\tx: 6,\n\t\t\t\t\ty: 3\n\t\t\t\t}\n\t\t\t},\n\t\t\temoji: {\n\t\t\t\tsymbol: '🗡️',\n\t\t\t\toffset: {\n\t\t\t\t\tx: -4,\n\t\t\t\t\ty: 3\n\t\t\t\t}\n\t\t\t},\n\t\t\teffect: (player) => ({\n\t\t\t\tattack: 1\n\t\t\t})\n\t\t},\n\t\t{\n\t\t\tname: 'Shield',\n\t\t\tcolor: 'lightgrey',\n\t\t\tascii: {\n\t\t\t\tsymbol: '#',\n\t\t\t\toffset: {\n\t\t\t\t\tx: 4,\n\t\t\t\t\ty: 3\n\t\t\t\t}\n\t\t\t},\n\t\t\temoji: {\n\t\t\t\tsymbol: '🛡️',\n\t\t\t\toffset: {\n\t\t\t\t\tx: -2,\n\t\t\t\t\ty: 3\n\t\t\t\t}\n\t\t\t},\n\t\t\teffect: (player) => ({\n\t\t\t\tdefense: 1\n\t\t\t})\n\t\t}\n\t]\n\n\taction(verb, world) {\n\t\tif (verb === 'bump') {\n\t\t\tworld.player.use(this, world)\n\t\t\tworld.remove(this)\n\t\t}\n\t\tif (verb === 'drop') {\n\t\t\tconsole.log('drop', this)\n\t\t}\n\t}\n}\n","import { Entity } from './Entity'\n\nexport class Monster extends Entity {\n\tstatic types = [\n\t\t{\n\t\t\tname: 'Ogre',\n\t\t\tcolor: 'lightgrey',\n\t\t\tascii: {\n\t\t\t\tsymbol: 'O',\n\t\t\t\toffset: { x: 2, y: 3 }\n\t\t\t},\n\t\t\temoji: {\n\t\t\t\tsymbol: '👹',\n\t\t\t\toffset: {\n\t\t\t\t\tx: -4,\n\t\t\t\t\ty: 3\n\t\t\t\t}\n\t\t\t},\n\n\t\t\thealth: 60\n\t\t},\n\t\t{\n\t\t\tname: 'Skeleton',\n\t\t\tcolor: 'gray',\n\t\t\tascii: {\n\t\t\t\tsymbol: 'S',\n\t\t\t\toffset: { x: 3, y: 2 }\n\t\t\t},\n\t\t\temoji: {\n\t\t\t\tsymbol: '☠️',\n\t\t\t\toffset: {\n\t\t\t\t\tx: -5,\n\t\t\t\t\ty: 3\n\t\t\t\t}\n\t\t\t},\n\n\t\t\thealth: 20\n\t\t},\n\t\t{\n\t\t\tname: 'Kobold',\n\t\t\tcolor: 'darkgreen',\n\t\t\tascii: {\n\t\t\t\tsymbol: 'k',\n\n\t\t\t\toffset: { x: 4, y: 3 }\n\t\t\t},\n\t\t\temoji: {\n\t\t\t\tsymbol: '🐲',\n\t\t\t\toffset: {\n\t\t\t\t\tx: -3,\n\t\t\t\t\ty: 3\n\t\t\t\t}\n\t\t\t},\n\n\t\t\thealth: 30\n\t\t},\n\t\t{\n\t\t\tname: 'Bat',\n\t\t\tcolor: 'brown',\n\t\t\tascii: {\n\t\t\t\tsymbol: 'B',\n\t\t\t\toffset: { x: 2, y: 3 }\n\t\t\t},\n\t\t\temoji: {\n\t\t\t\tsymbol: '🦇',\n\t\t\t\toffset: {\n\t\t\t\t\tx: -3,\n\t\t\t\t\ty: 4\n\t\t\t\t}\n\t\t\t},\n\t\t\thealth: 10\n\t\t},\n\t\t{\n\t\t\tname: 'Rat',\n\t\t\tcolor: 'brown',\n\t\t\tascii: {\n\t\t\t\tsymbol: 'r',\n\t\t\t\toffset: { x: 2, y: 3 }\n\t\t\t},\n\t\t\temoji: {\n\t\t\t\tsymbol: '🐀',\n\t\t\t\toffset: {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0\n\t\t\t\t}\n\t\t\t},\n\n\t\t\thealth: 10\n\t\t}\n\t]\n\n\tget definition() {\n\t\treturn Monster.types.find(type => type.name === this.attributes.name)\n\t}\n\n\taction(verb, world) {\n\t\tif (verb === 'bump') {\n\t\t\tconst damageDealtByPlayer = world.player.attributes.attack\n\t\t\tthis.takeDamage(damageDealtByPlayer)\n\t\t\tworld.addToHistory(`You attack ${this.attributes.name} for ${damageDealtByPlayer} damage`)\n\n\t\t\tif (this.attributes.health <= 0) {\n\t\t\t\tconst points = this.definition.health * 10\n\t\t\t\tworld.addToHistory(`${this.attributes.name} was slain (Score +${points})`)\n\t\t\t\tworld.player.attributes.score += points\n\t\t\t\tworld.remove(this)\n\t\t\t} else {\n\t\t\t\tconst {damageReduction} = world.player\n\t\t\t\tconst damageDealtToPlayer = Math.floor(this.definition.health / 2 * damageReduction) || 1\n\t\t\t\tworld.player.takeDamage(damageDealtToPlayer)\n\t\t\t\tworld.addToHistory(`${this.attributes.name} attacks you for ${damageDealtToPlayer} HP`)\n\n\t\t\t\tif (world.player.attributes.health <= 0) {\n\t\t\t\t\tworld.addToHistory('You died')\n\t\t\t\t\tworld.end()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import { Entity } from './Entity'\nimport { Spawner } from './Spawner'\n\nexport class Stairs extends Entity {\n\tattributes = {\n\t\tname: 'Stairs',\n\t\tcolor: 'black',\n\t\tascii: {\n\t\t\tsymbol: '<',\n\t\t\toffset: {\n\t\t\t\tx: 2,\n\t\t\t\ty: 2\n\t\t\t}\n\t\t},\n\t\temoji: {\n\t\t\tsymbol: '🚪',\n\t\t\toffset: { x: 0, y: 4 }\n\t\t}\n\t}\n\n\taction(verb, world) {\n\t\tif (verb === 'bump') {\n\t\t\tconst points = world.floor * 100\n\t\t\tworld.player.attributes.score += points\n\t\t\tworld.floor += 1\n\t\t\tworld.addToHistory(`You go down the stairs (Score +${points})`)\n\t\t\tworld.createCellularMap()\n\t\t\tworld.moveToValidSpace(world.player)\n\t\t\tworld.entities = [world.player]\n\t\t\tconst spawner = new Spawner(world)\n\t\t\tspawner.spawnLoot(10)\n\t\t\tspawner.spawnMonster(10)\n\t\t\tspawner.spawnStairs()\n\t\t}\n\t}\n}\n","import { Loot } from './Loot'\nimport { Monster } from './Monster'\nimport { Stairs } from './Stairs'\n\nexport class Spawner {\n\tconstructor(world) {\n\t\tthis.world = world\n\t}\n\n\trandomCoords() {\n\t\treturn [\n\t\t\trandomInt(this.world.width - 1),\n\t\t\trandomInt(this.world.height - 1)\n\t\t]\n\t}\n\n\tspawn(count, createEntity) {\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\tlet entity = createEntity()\n\t\t\tthis.world.add(entity)\n\t\t\tthis.world.moveToValidSpace(entity)\n\t\t}\n\t}\n\n\tspawnLoot(count) {\n\t\tthis.spawn(count, () => {\n\t\t\tconst [x, y] = this.randomCoords()\n\t\t\tconst loot = new Loot(\n\t\t\t\tx,\n\t\t\t\ty,\n\t\t\t\tthis.world.tileSize,\n\t\t\t\tLoot.types[randomInt(Loot.types.length)]\n\t\t\t)\n\t\t\treturn loot\n\t\t})\n\t}\n\n\tspawnMonster(count) {\n\t\tthis.spawn(count, () => {\n\t\t\tconst [x, y] = this.randomCoords()\n\t\t\tconst loot = new Monster(\n\t\t\t\tx,\n\t\t\t\ty,\n\t\t\t\tthis.world.tileSize,\n\t\t\t\tMonster.types[randomInt(Loot.types.length)]\n\t\t\t)\n\t\t\treturn loot\n\t\t})\n\t}\n\n\tspawnStairs() {\n\t\tthis.spawn(1, () => {\n\t\t\tconst [x, y] = this.randomCoords()\n\t\t\tconst stairs = new Stairs(x, y, this.world.tileSize)\n\t\t\treturn stairs\n\t\t})\n\t\t// this.world.add(stairs)\n\t\t// this.world.moveToValidSpace(stairs)\n\t}\n}\n\nfunction randomInt(max, min = 0) {\n\treturn Math.floor(Math.random() * Math.floor(max) + min)\n}\n","import React, { useRef, useEffect, useState } from 'react'\nimport { InputManager } from './InputManager'\nimport { World } from './World'\nimport { Spawner } from './Spawner'\n\nexport const Rogue = ({ width, height, tilesize, historyLines }) => {\n\tconst canvasRef = useRef(null)\n\tconst inputManager = new InputManager()\n\n\tconst [world, setWorldState] = useState(new World(width, height, tilesize, historyLines))\n\n\tconst handleInput = (action, data) => {\n\t\tif (world.ended) {\n\t\t\tif (action === 'reset') {\n\t\t\t\tinit()\n\t\t\t}\n\t\t\treturn\n\t\t}\n\n\t\tconst newWorldState = Object.assign(new World(), world)\n\n\t\tif (action === 'move') {\n\t\t\tnewWorldState.movePlayer(data.x, data.y)\n\t\t}\n\t\t\n\t\tsetWorldState(newWorldState)\n\t}\n\n\tconst init = () => {\n\t\tconst newWorldState = new World(width, height, tilesize, historyLines)\n\t\tnewWorldState.init()\n\t\t\n\t\tconst spawner = new Spawner(newWorldState)\n\t\tspawner.spawnLoot(10)\n\t\tspawner.spawnMonster(10)\n\t\tspawner.spawnStairs()\n\t\tsetWorldState(newWorldState)\n\t}\n\n\tuseEffect(() => {\n\t\tinit()\n\t\t// eslint-disable-next-line\n\t}, [])\n\n\tuseEffect(() => {\n\t\tinputManager.bindKeys()\n\t\tinputManager.subscribe(handleInput)\n\n\t\treturn () => {\n\t\t\tinputManager.unbindKeys()\n\t\t\tinputManager.unsubscribe(handleInput)\n\t\t}\n\t})\n\n\tuseEffect(() => {\n\t\tconst ctx = canvasRef.current.getContext('2d')\n\n\t\tif (!world.ended) {\n\t\t\tctx.clearRect(0, 0, width * tilesize, height * tilesize)\n\t\t\tworld.draw(ctx)\n\t\t} else {\n\t\t\tctx.fillStyle = 'rgba(0,0,0,0.8)'\n\t\t\tctx.fillRect(0, 0, width * tilesize, height * tilesize)\n\t\t\tctx.textAlign = 'center'\n\t\t\tctx.fillStyle = '#fff'\n\t\t\tctx.fillText('Game Over', width * tilesize / 2, height * tilesize / 2 - tilesize)\n\t\t\tctx.fillText('Press Enter to Try Again', width * tilesize / 2, height * tilesize / 2 + tilesize)\n\t\t\tworld.printLog(ctx)\n\t\t}\n\t})\n\n\treturn (\n\t\t<canvas\n\t\t\tref={canvasRef}\n\t\t\twidth={width * tilesize}\n\t\t\theight={height * tilesize + historyLines * tilesize}\n\t\t\tstyle={{ margin: '1px', background: '#3F3F3F' }}\n\t\t></canvas>\n\t)\n}\n\nexport default Rogue\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Rogue from './Rogue'\nimport './Rogue.css'\n\nReactDOM.render(<Rogue width={40} height={40} tilesize={20} historyLines={10} />, document.body)\n"],"sourceRoot":""}